version: 2

macros:
  - name: generate_schema_name
    description: |
      Returns the name of a schema in which a model should land in Snowflake.

      For production models, the value from `dbt_project.yml` will be used, or any
      custom name provided in the model's config block.

      For development models, the schema from `profiles.yml` will be prepended
      to the custom value found in `dbt_project.yml` or the model's config block.
    arguments:
      - name: custom_schema_name
        type: string
        description: |
          The schema provided via `dbt_project.yml` or model config
      - name: node
        type: string
        description: |
          The node that is currently being processed by dbt
  - name: get_snowflake_refresh_warehouse
    description: |
      Full refreshes of incremental models sometimes need a little bit of
      extra firepower. This returns an appropriate (i.e. 4XL) warehouse
      for that case. Use it with caution! This returns large if the
      `--full-refresh` flag is set via the CLI.
    arguments:
      - name: small
        type: string
        description: |
          Snowflake warehouse size to use when *not* performing a full-refresh
      - name: big
        type: string
        description: |
          Snowflake warehouse size to use when performing a full-refresh

      - name: validate_all_schemas
        description: |
          Macro to validate all model and source schemas in the project against
          their documentation.

          This macro creates a comprehensive report of schema validation issues
          across all models and sources in the project. It compares the documented
          columns in dbt YAML files with the actual columns in the database
          tables/views.

          The macro will always raise an error if validation issues are found, making
          it suitable for use in CI/CD pipelines to enforce schema documentation
          standards.
        arguments:
          - name: errors_only
            type: boolean
            description: |
              If true, only shows tables with validation errors. If false, shows all
              validation results including successful matches. Defaults to false.
          - name: undocumented_columns_as_errors
            type: boolean
            description: |
              If true, treats undocumented columns as validation errors. If false,
              undocumented columns are reported as warnings but don't cause failure.
              Defaults to true.

      - name: drop_schemas_with_prefix
        description: |
          Macro to drop a schema in the database with a specified prefix.

          This macro constructs the schema name using the provided prefix and drops
          it if it exists.
          Useful for cleaning up test or temporary schemas in CI/CD workflows.
        arguments:
          - name: prefix
            type: string
            description: |
              The prefix to use when constructing the schema name to drop.
          - name: database
            type: string
            description: |
              The database in which the schema resides. Optional; defaults to the target database.

  - name: validate_all_schemas
    description: |
      Macro to validate all model and source schemas in the project against
      their documentation.

      This macro creates a comprehensive report of schema validation issues
      across all models and sources in the project. It compares the documented
      columns in dbt YAML files with the actual columns in the database
      tables/views.

      The macro will always raise an error if validation issues are found, making
      it suitable for use in CI/CD pipelines to enforce schema documentation
      standards.
    arguments:
      - name: errors_only
        type: boolean
        description: |
          If true, only shows tables with validation errors. If false, shows all
          validation results including successful matches. Defaults to false.
      - name: undocumented_columns_as_errors
        type: boolean
        description: |
          If true, treats undocumented columns as validation errors. If false,
          undocumented columns are reported as warnings but don't cause failure.
          Defaults to true.
  - name: drop_schema_with_prefix
    description: |
      Macro to drop a schema in the database with a specified prefix.

      This macro constructs the schema name using the provided prefix and drops
      it if it exists.
      Useful for cleaning up test or temporary schemas in CI/CD workflows.
    arguments:
      - name: prefix
        type: string
        description: |
          The prefix to use when constructing the schema name to drop.
      - name: database
        type: string
        description: |
          The database in which the schema resides. Optional; defaults to the target database.
